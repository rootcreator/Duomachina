# Generated by Django 5.2.1 on 2025-06-05 00:20

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='MagazineCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Magazine Categories',
            },
        ),
        migrations.CreateModel(
            name='PodcastCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Podcast Categories',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('issue_number', models.PositiveIntegerField()),
                ('comic_publisher', models.CharField(max_length=255)),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='comic_covers/%Y/%m/%d/')),
                ('release_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Comics',
                'ordering': ['-release_date'],
            },
        ),
        migrations.CreateModel(
            name='Magazine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('issue_number', models.PositiveIntegerField()),
                ('release_date', models.DateField()),
                ('content', models.TextField()),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='magazine_covers/%Y/%m/%d/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='magazines', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='magazines', to='media.magazinecategory')),
                ('tags', models.ManyToManyField(blank=True, related_name='magazines', to='media.tag')),
            ],
            options={
                'ordering': ['-release_date'],
                'unique_together': {('title', 'issue_number')},
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('file', models.FileField(upload_to='media_files/%Y/%m/%d/')),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('audio', 'Audio'), ('video', 'Video'), ('book', 'Book'), ('manuscript', 'Manuscript')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image_width', models.PositiveIntegerField(blank=True, help_text='Width of the image in pixels', null=True)),
                ('image_height', models.PositiveIntegerField(blank=True, help_text='Height of the image in pixels', null=True)),
                ('image_format', models.CharField(blank=True, help_text='Format of the image (e.g., JPEG, PNG)', max_length=10)),
                ('camera_model', models.CharField(blank=True, help_text='Camera model used to take the photo', max_length=100)),
                ('exposure_time', models.CharField(blank=True, help_text='Exposure time of the photo', max_length=50)),
                ('focal_length', models.CharField(blank=True, help_text='Focal length used for the photo', max_length=50)),
                ('is_panorama', models.BooleanField(default=False, help_text='Whether this is a panoramic image')),
                ('duration', models.DurationField(blank=True, help_text='Duration of the audio/video', null=True)),
                ('audio_format', models.CharField(blank=True, help_text='Format of the audio file (e.g., MP3, WAV)', max_length=10)),
                ('sample_rate', models.PositiveIntegerField(blank=True, help_text='Sample rate in Hz', null=True)),
                ('bit_rate', models.PositiveIntegerField(blank=True, help_text='Bit rate in kbps', null=True)),
                ('is_podcast_episode', models.BooleanField(default=False, help_text='Whether this is part of a podcast series')),
                ('episode_number', models.PositiveIntegerField(blank=True, help_text='Episode number if part of a series', null=True)),
                ('video_format', models.CharField(blank=True, help_text='Format of the video file (e.g., MP4, AVI)', max_length=10)),
                ('video_width', models.PositiveIntegerField(blank=True, help_text='Width of the video in pixels', null=True)),
                ('video_height', models.PositiveIntegerField(blank=True, help_text='Height of the video in pixels', null=True)),
                ('frame_rate', models.FloatField(blank=True, help_text='Frame rate of the video (fps)', null=True)),
                ('has_subtitles', models.BooleanField(default=False, help_text='Whether the video has subtitles')),
                ('is_series_episode', models.BooleanField(default=False, help_text='Whether this is part of a video series')),
                ('video_series_name', models.CharField(blank=True, help_text='Name of the series if part of one', max_length=255)),
                ('video_season_number', models.PositiveIntegerField(blank=True, help_text='Season number if part of a series', null=True)),
                ('video_episode_number', models.PositiveIntegerField(blank=True, help_text='Episode number if part of a series', null=True)),
                ('author_name', models.CharField(blank=True, help_text="Author's name for books and manuscripts", max_length=255)),
                ('publication_date', models.DateField(blank=True, help_text='Publication date for books', null=True)),
                ('isbn', models.CharField(blank=True, help_text='ISBN for books', max_length=13)),
                ('page_count', models.PositiveIntegerField(blank=True, help_text='Number of pages', null=True)),
                ('language', models.CharField(blank=True, help_text='Primary language of the content', max_length=50)),
                ('book_publisher', models.CharField(blank=True, help_text='Publisher of the book', max_length=255)),
                ('edition', models.CharField(blank=True, help_text='Edition of the book', max_length=50)),
                ('is_book_series', models.BooleanField(default=False, help_text='Whether this is part of a book series')),
                ('book_series_name', models.CharField(blank=True, help_text='Name of the series if part of one', max_length=255)),
                ('book_series_number', models.PositiveIntegerField(blank=True, help_text='Book number in the series', null=True)),
                ('manuscript_date', models.DateField(blank=True, help_text='Original date of the manuscript', null=True)),
                ('manuscript_location', models.CharField(blank=True, help_text='Physical location of the manuscript', max_length=255)),
                ('manuscript_condition', models.CharField(blank=True, help_text='Current condition of the manuscript', max_length=100)),
                ('restoration_history', models.TextField(blank=True, help_text='History of restoration work')),
                ('origin_location', models.CharField(blank=True, help_text='Original location of the manuscript', max_length=255)),
                ('script_type', models.CharField(blank=True, help_text='Type of script used in the manuscript', max_length=100)),
                ('material', models.CharField(blank=True, help_text='Material of the manuscript (e.g., parchment, paper)', max_length=100)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to=settings.AUTH_USER_MODEL)),
                ('categories', models.ManyToManyField(blank=True, related_name='media', to='media.category')),
                ('tags', models.ManyToManyField(blank=True, related_name='media', to='media.tag')),
            ],
            options={
                'verbose_name_plural': 'Media',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Podcast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('audio_file', models.FileField(upload_to='podcasts/%Y/%m/%d/')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='podcast_covers/%Y/%m/%d/')),
                ('release_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='podcasts', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='podcasts', to='media.podcastcategory')),
                ('tags', models.ManyToManyField(blank=True, related_name='podcasts', to='media.tag')),
            ],
            options={
                'ordering': ['-release_date'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('comic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comic_comments', to='media.comic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_comments', to=settings.AUTH_USER_MODEL)),
                ('magazine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='magazine_comments', to='media.magazine')),
                ('media', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='media_comments', to='media.media')),
                ('podcast', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='podcast_comments', to='media.podcast')),
            ],
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, '1 Star'), (2, '2 Stars'), (3, '3 Stars'), (4, '4 Stars'), (5, '5 Stars')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comic_ratings', to='media.comic')),
                ('magazine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='magazine_ratings', to='media.magazine')),
                ('media', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='media_ratings', to='media.media')),
                ('podcast', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='podcast_ratings', to='media.podcast')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_ratings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('magazine', 'Magazine'), ('podcast', 'Podcast'), ('comic', 'Comic')], max_length=10)),
                ('content_id', models.PositiveIntegerField()),
                ('subscription_date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'content_type', 'content_id')},
            },
        ),
    ]
